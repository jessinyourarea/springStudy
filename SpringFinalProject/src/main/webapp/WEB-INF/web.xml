<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

<!-- 1. Controller (Servlet => URL주소에 맞게 톰캣에 의해 호출)
         DispatcherServlet (Servlet) = Spring 라이브러리
                |
            클래스 관리자 (설정 파일을 전송) 
	       <init-param>
	         <param-name>contextConfigLocation/이름설정/</param-name>
	         <param-value>/WEB-INF/config/application-*.xml/위치 저장/</param-value>
	       </init-param>
       
     2. HttpServletRequest : 사용하지 않는다 (권장)
         => 한글 변환 등록
         => Cookie 사용
         => HttpServletResponse : Cookie, 파일 업로드
         => HttpServletRequest : 사용자의 요청값, JSP로 결과값 전송
                    |
              요청값은 매개변수로 설정
              전송은 Model 클래스를 이용함
      
      사용자 요청
         .do      ============= DispatcherServlet ================= HandlerMapping ========== Model (사용자 정의)
                                                                                         @Controller
                                                                                         @RestController
                                                                                             |
                                                                                          메소드를 찾아서 요청 수행
                                                                                         @RequestMapping : GET/POST
                                                                                         @GetMapping : GET
                                                                                         @PostMapping : POST
                                             <==================================================                                              
                                    ViewResolver
                                    : JSP를 찾아서 Request를 전송해주는 역할
                                     => 경로명, 확장자 => return 과 관련
                                     |
                                     |
                                    결과값(request)를 받아서 출력 => JSP
                                    ================================ 브라우저에 출력
         
         => 1. 환경 설정 / 클래스 등록 , 데이터베이스 연결
               ===================================
                application-*.xml
            2. 형식에 맞춰 사용자 정의 클래스 메모리 할당
               1) XML로 설정 => <bean...> : 공용 
               2) 어노테이션을 이용한다 <context:component-scan base-package="">
                   => 패키지 단위로 등록 (선별적으로 메모리 할당)
                                        => VO, Interface는 해당사항 없음!
                   => 기능별 메모리 할당 요청
                      = 일반 클래스
                        @Component
                          = Junit (테스트용)
                          = ~Manager (Open API)
                      = 데이터베이스 연결 클래스
                        @Repository
                          = 테이블 한개 연결 
                        @Service 
                          = 테이블 여러개 연결
                          = BI (Business Integration)
                      = 모델 클래스(기능) => 조립기 (데이터베이스+브라우저 전송)
                        @Controller : 요청 처리 / 화면 이동
                                      =================
                                      = forward
                                        = request를 전송
                                          request.setAttribute()
                                          model.addAttribute()
                                        = return "경로명/JSP명"
                                          request를 초기화 => 지정된 화면으로 이동
                                          return "redirect:~~.do"; //재사용 기법
                                      = redirect
                          => 매개변수 사용
                             (request.getParameter() , ... , Model , 기타(내장객체))
                        @RestController(6버전) : 
                          => 화면 이동 (자바스크립트에 데이터 전송하는 과정, 모바일도 데이터만 전송)
                                       |
                                     일반 데이터 전송이 가능
                                     JSON (자바스크립트 객체 표현법)
                                     VO => {}
                                     List => []
                          => 현재 개발
                             =======
                             Front / Back 연결하지 않는 추세!?
                              : 완전 분리.......
                                          
                      = 공통으로 사용되는 예외처리
                        @ControllerAdvice
                        @RestControllerAdvice
                      = 인터셉트
                         => 보통 <bean>를 이용해서 생성
                      = 자바 환경 설정 파일 => XML 대신 사용 => 보안 GOOD
                      = AOP는 메모리 할당이 아니다 => @Component를 올려놓고 사용해야한다
                      
             스프링의 기반
                = DI
 		          스프링을 통해서 : 클래스를 관리
				                ========= 
				                객체 생명주기 (생성~소멸) 
		                              |
		                          생성시 필요한 데이터가 존재할 수 있다
		                          => 필요한 데이터를 전송(DI)
		                          => Setter DI, Constructor DI, Method DI
		                          => XML을 이용해서 전송, Autowired
		                          : **클래스와 클래스의 연관 관계도를 작성하는 것이다? 
                = AOP
                  공통모듈 => 핵심만 소스 코딩
                  =====
                   JoinPoint / PointCut -적용되는 메소드를 지정
                       |            
                   호출되는 시점 설정
                    = Before
                    = After
                    = After-Throwing
                    = After-Returning
                    = Around
                  => 대표적인 예시: Transaction / Security  
                    스프링 DI란? 
                    클래스와 클래스 간의 연관관계를 작성하는 방법 중 하나입니다.
                    클래스 간의 의존성을 느슨하게 만들어주어, 코드의 유연성과 재사용성을 높이고 유지보수가 용이한 구조를 구축할 수 있습니다
                    핵심 아이디어: 클래스에 직접 의존하는 객체를 생성하거나 관리하지 않고, 외부에서 주입받도록 하는 것입니다.
                    
                = Application / WebApplication (MVC) 
                   동작할 수 있게 미리 틀을 제작
                   => 메뉴얼을 제작해서 전송
                = 인터셉트
                = Task
                = WebSocket
                
                
                
                
               
                                       
         -->
	<servlet>
	  <servlet-name>dispatcher</servlet-name>
	  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	  <init-param>
	    <param-name>contextConfigLocation</param-name>
	    <param-value>/WEB-INF/config/application-*.xml</param-value>
	  </init-param>
	    <load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
	  <servlet-name>dispatcher</servlet-name>
	  <url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<!-- 1. 한글 변환 등록 -->
	<filter>
	  <filter-name>encodingFilter</filter-name>
	  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	  <init-param>
	    <param-name>encoding</param-name>
	    <param-value>UTF-8</param-value>
	  </init-param>
	</filter>
	
	<filter-mapping>
	  <filter-name>encodingFilter</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>

	<error-page>
	  <error-code>400</error-code>
	  <location>/error/error400.jsp</location>
	</error-page>
	<error-page>
	  <error-code>404</error-code>
	  <location>/error/error404.jsp</location>
	</error-page>
	<error-page>
	  <error-code>412</error-code>
	  <location>/error/error412.jsp</location>
	</error-page>
	<error-page>
	  <error-code>500</error-code>
	  <location>/error/error500.jsp</location>
	</error-page>

</web-app>
